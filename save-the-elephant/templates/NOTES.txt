Thank you for installing {{ .Chart.Name }}!

Your PostgreSQL instance has been deployed successfully.

** Please be patient while the chart is being deployed **

PostgreSQL can be accessed via port {{ .Values.service.primary.port }} on the following DNS names:

{{- if .Values.replication.enabled }}

  Primary (read-write):
    {{ include "save-the-elephant.fullname" . }}-postgresql.{{ .Release.Namespace }}.svc.cluster.local:{{ .Values.service.primary.port }}

  Read-only replicas ({{ .Values.replication.replicas }} replica(s)):
    {{ include "save-the-elephant.fullname" . }}-postgresql-readonly.{{ .Release.Namespace }}.svc.cluster.local:{{ .Values.service.readOnly.port }}

{{- else }}

  {{ include "save-the-elephant.fullname" . }}-postgresql.{{ .Release.Namespace }}.svc.cluster.local:{{ .Values.service.primary.port }}

{{- end }}

To get the password for the "{{ .Values.postgresql.auth.username }}" user, run:

{{- if .Values.postgresql.auth.existingSecret }}
  kubectl get secret {{ .Values.postgresql.auth.existingSecret }} -n {{ .Release.Namespace }} -o jsonpath="{.data.postgres-password}" | base64 -d
{{- else }}
  kubectl get secret {{ include "save-the-elephant.fullname" . }}-postgresql -n {{ .Release.Namespace }} -o jsonpath="{.data.postgres-password}" | base64 -d
{{- end }}

To connect to your database from within the cluster:

  1. Run a PostgreSQL client pod:

     kubectl run {{ include "save-the-elephant.fullname" . }}-client --rm --tty -i --restart='Never' \
       --namespace {{ .Release.Namespace }} \
       --image {{ .Values.postgresql.image.repository }}:{{ .Values.postgresql.image.tag }} \
       --env="PGPASSWORD=$(kubectl get secret {{ include "save-the-elephant.secretName" . }} -n {{ .Release.Namespace }} -o jsonpath='{.data.postgres-password}' | base64 -d)" \
       --command -- psql -h {{ include "save-the-elephant.fullname" . }}-postgresql -U {{ .Values.postgresql.auth.username }} -d {{ .Values.postgresql.auth.database }}

{{- if .Values.backup.enabled }}

Backup Configuration:
  - Schedule: {{ .Values.backup.schedule }}
  - S3 Bucket: {{ .Values.backup.s3.bucket }}
  {{- if .Values.backup.s3.prefix }}
  - S3 Prefix: {{ .Values.backup.s3.prefix }}
  {{- else }}
  - S3 Prefix: {{ .Release.Name }}/{{ .Release.Namespace }}/
  {{- end }}

Note: Configure S3 bucket lifecycle policies for backup retention management.

To manually trigger a backup job:

  kubectl create job --from=cronjob/{{ include "save-the-elephant.fullname" . }}-backup {{ include "save-the-elephant.fullname" . }}-backup-manual -n {{ .Release.Namespace }}

To restore from a backup:

  1. List available backups in S3
  2. Run the restore script:

     kubectl run {{ include "save-the-elephant.fullname" . }}-restore --rm --tty -i --restart='Never' \
       --namespace {{ .Release.Namespace }} \
       --image {{ .Values.backup.image.repository }}:{{ .Values.backup.image.tag }} \
       --env="POSTGRES_PASSWORD=$(kubectl get secret {{ include "save-the-elephant.secretName" . }} -n {{ .Release.Namespace }} -o jsonpath='{.data.postgres-password}' | base64 -d)" \
       --env="S3_ACCESS_KEY_ID=$(kubectl get secret {{ include "save-the-elephant.s3SecretName" . }} -n {{ .Release.Namespace }} -o jsonpath='{.data.access-key-id}' | base64 -d)" \
       --env="S3_SECRET_ACCESS_KEY=$(kubectl get secret {{ include "save-the-elephant.s3SecretName" . }} -n {{ .Release.Namespace }} -o jsonpath='{.data.secret-access-key}' | base64 -d)" \
       --overrides='{"spec":{"containers":[{"name":"restore","image":"{{ .Values.backup.image.repository }}:{{ .Values.backup.image.tag }}","command":["/bin/bash","/scripts/restore.sh","backup_YYYYMMDD_HHMMSS.sql.gz"],"env":[{"name":"POSTGRES_PASSWORD","value":"$(POSTGRES_PASSWORD)"},{"name":"S3_ACCESS_KEY_ID","value":"$(S3_ACCESS_KEY_ID)"},{"name":"S3_SECRET_ACCESS_KEY","value":"$(S3_SECRET_ACCESS_KEY)"}],"volumeMounts":[{"name":"backup-scripts","mountPath":"/scripts"}]}],"volumes":[{"name":"backup-scripts","configMap":{"name":"{{ include "save-the-elephant.fullname" . }}-backup-scripts","defaultMode":493}}]}}'

{{- end }}

{{- if .Values.replication.enabled }}

Replication Information:
  - Mode: {{ .Values.replication.synchronousCommit }}
  - Replicas: {{ .Values.replication.replicas }}

The StatefulSet will create {{ add .Values.replication.replicas 1 }} pods:
  - Pod 0: Primary (read-write)
  - Pods 1-{{ .Values.replication.replicas }}: Replicas (read-only)

{{- end }}

For more information, visit: {{ .Chart.Home }}
